'use strict';

// Do this as the first thing so that any code reading it knows the right env.
// 将此作为第一件事，以便任何读取它的代码都知道正确的环境。
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
// 使脚本在未处理的拒绝时崩溃，而不是默默地忽略它们。将来，未处理的承诺拒绝将以非零退出码终止Node.js进程。
process.on('unhandledRejection', err => { throw err; });

// Ensure environment variables are read.
// 确保读取环境变量。
require('../config/env');

const fs = require('fs');
const chalk = require('react-dev-utils/chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const semver = require('semver');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');
const getClientEnvironment = require('../config/env');
const react = require(require.resolve('react', { paths: [paths.appPath] }));

const env = getClientEnvironment(paths.publicUrlOrPath.slice(0, -1));
const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
// 如果缺少所需的文件，则发出警告并崩溃
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow( // 试图绑定到HOST环境变量: 
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  // 如果这是无意的，请检查您是否错误地将其设置在shell中。
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  console.log(
    `Learn more here: ${chalk.yellow('https://cra.link/advanced-config')}`
  );
  console.log();
}

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.
// 我们要求你明确地设置浏览器，不要回到默认的browserslist
const { checkBrowsers } = require('react-dev-utils/browsersHelper');
checkBrowsers(paths.appPath, isInteractive)
  .then(() => {
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `choosePort()` Promise resolves to the next free port.
    // 我们尝试使用默认端口，但如果它很忙，我们就为用户提供在不同端口上运行的机会。' choosePort() '承诺解析到下一个空闲端口
    return choosePort(HOST, DEFAULT_PORT);
  })
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }

    const config = configFactory('development');
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(paths.appPackageJson).name;

    const useTypeScript = fs.existsSync(paths.appTsConfig);
    const urls = prepareUrls(
      protocol,
      HOST,
      port,
      paths.publicUrlOrPath.slice(0, -1)
    );
    // Create a webpack compiler that is configured with custom messages.
    // 创建一个配置了自定义消息的webpack编译器。
    const compiler = createCompiler({ appName, config, urls, useYarn, useTypeScript, webpack });
    // Load proxy config
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic, paths.publicUrlOrPath);
    // Serve webpack assets generated by the compiler over a web server.
    // 通过web服务器提供由编译器生成的webpack资源。
    const serverConfig = { ...createDevServerConfig(proxyConfig, urls.lanUrlForConfig), host: HOST, port };
    const devServer = new WebpackDevServer(serverConfig, compiler);
    // Launch WebpackDevServer. 启动WebpackDevServer
    devServer.startCallback(() => {
      if (isInteractive) { clearConsole() }

      if (env.raw.FAST_REFRESH && semver.lt(react.version, '16.10.0')) {
        // 快速刷新需要React 16.10或更高版本。你正在使用React
        console.log(
          chalk.yellow(
            `Fast Refresh requires React 16.10 or higher. You are using React ${react.version}.`
          )
        );
      }
      // 启动开发服务器
      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function (sig) {
      process.on(sig, function () { devServer.close(); process.exit(); });
    });

    if (process.env.CI !== 'true') {
      // Gracefully exit when stdin ends
      // 当stdin结束时优雅地退出
      process.stdin.on('end', function () { devServer.close(); process.exit(); });
    }
  })
  .catch(err => {
    if (err && err.message) { console.log(err.message); }
    process.exit(1);
  });
